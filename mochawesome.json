{
  "stats": {
    "suites": 5,
    "tests": 21,
    "passes": 15,
    "pending": 0,
    "failures": 6,
    "start": "2022-04-06T13:03:53.000Z",
    "end": "2022-04-06T13:03:53.039Z",
    "duration": 39,
    "testsRegistered": 21,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7346994b-00cc-4f52-9d8c-326159e7b216",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a2df6cff-e4eb-4612-9b85-d0dbde1e2486",
          "title": "Create and access table",
          "fullFile": "C:\\Users\\MFD\\Desktop\\Reengen\\RengenMocha\\test\\app.spec.js",
          "file": "\\test\\app.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Table should be created",
              "fullTitle": "Create and access table Table should be created",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = app.createTable(table_name, { brand: 'string', model: 'string', quantity: 'int' });\nassert.ifError(null, \"Table can not be created\")",
              "err": {},
              "uuid": "bbd4a4c1-dffe-4ede-9536-3cfcbab253ef",
              "parentUUID": "a2df6cff-e4eb-4612-9b85-d0dbde1e2486",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should be accessible if exist",
              "fullTitle": "Create and access table Table should be accessible if exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "table = app.getTable(table_name)\nexpect(table.columns.brand).to.be.equal('string', \"Wrong data type on column\")\nexpect(table.columns.model).to.be.equal('string', \"Wrong data type on column\")\nexpect(table.columns.quantity).to.be.equal('int', \"Wrong data type on column\")",
              "err": {},
              "uuid": "9005f7f9-020c-4c66-8d45-b7c15a95f14e",
              "parentUUID": "a2df6cff-e4eb-4612-9b85-d0dbde1e2486",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be accessible if not exist",
              "fullTitle": "Create and access table Table should not be accessible if not exist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(app.getTable('cars'), undefined, \"Should not be a table with this name\")",
              "err": {},
              "uuid": "26d7c4c4-59bd-4b83-9f18-f7d058640576",
              "parentUUID": "a2df6cff-e4eb-4612-9b85-d0dbde1e2486",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbd4a4c1-dffe-4ede-9536-3cfcbab253ef",
            "9005f7f9-020c-4c66-8d45-b7c15a95f14e",
            "26d7c4c4-59bd-4b83-9f18-f7d058640576"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ea746988-8d36-4605-89cb-4c37701b52a1",
          "title": "Insert records to the table",
          "fullFile": "C:\\Users\\MFD\\Desktop\\Reengen\\RengenMocha\\test\\app.spec.js",
          "file": "\\test\\app.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Table should be created valid data",
              "fullTitle": "Insert records to the table Table should be created valid data",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(valid_data[0]);\nassert.equal(result, true, \"Table cannot be created\")",
              "err": {},
              "uuid": "dddcbb9e-dfa8-47bf-ad5d-b96db9e1dcb7",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be inserted with invalid data type (string instead int)",
              "fullTitle": "Insert records to the table Table should not be inserted with invalid data type (string instead int)",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(invalid_data[0]);\nassert.equal(result, false, \"String data was entered instead of the integer value.\")",
              "err": {
                "message": "AssertionError: String data was entered instead of the integer value.",
                "estack": "AssertionError [ERR_ASSERTION]: String data was entered instead of the integer value.\n    at Context.<anonymous> (test\\app.spec.js:60:12)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "69723fc9-45a4-4bb7-b461-acef546b2c22",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be inserted with invalid data type (int instead string)",
              "fullTitle": "Insert records to the table Table should not be inserted with invalid data type (int instead string)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(invalid_data[1]);\nassert.equal(result, false, \"Integer data was entered instead of the string value.\")",
              "err": {},
              "uuid": "036a1b75-05e8-45a9-8cb3-37b8041f7a81",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be inserted with empty data",
              "fullTitle": "Insert records to the table Table should not be inserted with empty data",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(invalid_data[2]);\nassert.equal(result, false, \"Empty data was entered\")",
              "err": {
                "message": "AssertionError: Empty data was entered",
                "estack": "AssertionError [ERR_ASSERTION]: Empty data was entered\n    at Context.<anonymous> (test\\app.spec.js:70:12)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "032e84ef-aa86-455e-af31-e23453089ffd",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be inserted with invalid data type (boolean)",
              "fullTitle": "Insert records to the table Table should not be inserted with invalid data type (boolean)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(invalid_data[3]);\nassert.equal(result, false, \"Boolean data entered\")",
              "err": {
                "message": "AssertionError: Boolean data entered",
                "estack": "AssertionError [ERR_ASSERTION]: Boolean data entered\n    at Context.<anonymous> (test\\app.spec.js:75:12)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "acdbd3b7-773e-46a9-8aee-4d597e18b573",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be inserted with invalid data type (float)",
              "fullTitle": "Insert records to the table Table should not be inserted with invalid data type (float)",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(invalid_data[4]);\nassert.equal(result, false, \"Float data entered\")",
              "err": {
                "message": "AssertionError: Float data entered",
                "estack": "AssertionError [ERR_ASSERTION]: Float data entered\n    at Context.<anonymous> (test\\app.spec.js:80:12)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "1b476bb8-8744-4ae4-839d-5114e6f5c3b8",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table should not be inserted with non-object type",
              "fullTitle": "Insert records to the table Table should not be inserted with non-object type",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords('Nokia', '3310', 331);\nassert.equal(result, false, \"Data type should be object\")",
              "err": {
                "message": "AssertionError: Data type should be object",
                "estack": "AssertionError [ERR_ASSERTION]: Data type should be object\n    at Context.<anonymous> (test\\app.spec.js:85:12)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "6c25e7d8-8e3c-4b50-a967-bbf4d7a597e0",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When the quantity is entered starting with (0)",
              "fullTitle": "Insert records to the table When the quantity is entered starting with (0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(invalid_data[5]);\ngetTable = table.getAllRecords();\nassert.equal(result, true, \"Table cannot be created\")\nassert.notEqual(getTable[5].quantity, invalid_data[5].quantity, \"The quantity values matched\")\n/*console.log(getTable[5].quantity)\nconsole.log(invalid_data[5].quantity)*/",
              "err": {},
              "uuid": "a0a79198-edea-4e73-972d-c4e67944a1fe",
              "parentUUID": "ea746988-8d36-4605-89cb-4c37701b52a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dddcbb9e-dfa8-47bf-ad5d-b96db9e1dcb7",
            "036a1b75-05e8-45a9-8cb3-37b8041f7a81",
            "a0a79198-edea-4e73-972d-c4e67944a1fe"
          ],
          "failures": [
            "69723fc9-45a4-4bb7-b461-acef546b2c22",
            "032e84ef-aa86-455e-af31-e23453089ffd",
            "acdbd3b7-773e-46a9-8aee-4d597e18b573",
            "1b476bb8-8744-4ae4-839d-5114e6f5c3b8",
            "6c25e7d8-8e3c-4b50-a967-bbf4d7a597e0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "61db79b6-73bd-44aa-af24-3bc8ed218836",
          "title": "Boundary levels checks on data",
          "fullFile": "C:\\Users\\MFD\\Desktop\\Reengen\\RengenMocha\\test\\app.spec.js",
          "file": "\\test\\app.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Negative boundary for integer",
              "fullTitle": "Boundary levels checks on data Negative boundary for integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(boundary_levels_data[0]);\nassert.equal(result, false, \"Integer data can not be lower than -999.\")",
              "err": {},
              "uuid": "67e925bd-57e8-40a5-bb9e-64cea7bde06b",
              "parentUUID": "61db79b6-73bd-44aa-af24-3bc8ed218836",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Positive boundary for integer",
              "fullTitle": "Boundary levels checks on data Positive boundary for integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(boundary_levels_data[1]);\nassert.equal(result, false, \"Integer data can not be higher than 999.\")",
              "err": {},
              "uuid": "b836cf9a-95f9-4c8c-af1e-17ac14ae6af4",
              "parentUUID": "61db79b6-73bd-44aa-af24-3bc8ed218836",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "string 256 character",
              "fullTitle": "Boundary levels checks on data string 256 character",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.insertRecords(boundary_levels_data[2]);\nassert.equal(result, false, \"String data can not be longer than 255 character.\")",
              "err": {},
              "uuid": "6a2ba71b-fb52-466f-8ac0-154ad1509e1e",
              "parentUUID": "61db79b6-73bd-44aa-af24-3bc8ed218836",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67e925bd-57e8-40a5-bb9e-64cea7bde06b",
            "b836cf9a-95f9-4c8c-af1e-17ac14ae6af4",
            "6a2ba71b-fb52-466f-8ac0-154ad1509e1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "993de155-eba2-411c-a564-2c4aaaf29b73",
          "title": "Filter records by columns",
          "fullFile": "C:\\Users\\MFD\\Desktop\\Reengen\\RengenMocha\\test\\app.spec.js",
          "file": "\\test\\app.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Filter with valid (brand) at column",
              "fullTitle": "Filter records by columns Filter with valid (brand) at column",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.filterRecords({ brand: 'Apple' });\nresult.forEach(function (item) {\n  item.brand === 'Apple' ?\n    assert.ok(true) :\n    assert.ok(false, \"Filter can not work correctly with (brand)\")\n})",
              "err": {},
              "uuid": "c6c01b1c-8806-41a4-a724-b5f65a749c70",
              "parentUUID": "993de155-eba2-411c-a564-2c4aaaf29b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter with invalid (brand) at column",
              "fullTitle": "Filter records by columns Filter with invalid (brand) at column",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.filterRecords({ brand: 'Ferrari' });\nresult.forEach(function (item) {\n  item.brand === 'Ferrari' ?\n    assert.ok(false) :\n    assert.ok(true, \"Filter can not work correctly with (brand)\")\n})",
              "err": {},
              "uuid": "94b0a3fd-0752-4fb3-a0af-7a8c3822b678",
              "parentUUID": "993de155-eba2-411c-a564-2c4aaaf29b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter with valid (model) at column",
              "fullTitle": "Filter records by columns Filter with valid (model) at column",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.filterRecords({ model: '13 Pro' });\nresult.forEach(function (item) {\n  item.model === '13 Pro' ?\n    assert.ok(true) :\n    assert.ok(false, \"Filter can not work correctly with (model)\")\n})",
              "err": {},
              "uuid": "aeda478e-820f-4f04-9807-85a6c7dc4c48",
              "parentUUID": "993de155-eba2-411c-a564-2c4aaaf29b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter with invalid (model) at column",
              "fullTitle": "Filter records by columns Filter with invalid (model) at column",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.filterRecords({ model: 'SF90 Stradale' });\nresult.forEach(function (item) {\n  item.model === 'SF90 Stradale' ?\n    assert.ok(false) :\n    assert.ok(true, \"Filter can not work correctly with (model)\")\n})",
              "err": {},
              "uuid": "7ca65af2-26f6-4fe6-bebb-b3f7410a0c15",
              "parentUUID": "993de155-eba2-411c-a564-2c4aaaf29b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter with valid (quantity) at column",
              "fullTitle": "Filter records by columns Filter with valid (quantity) at column",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.filterRecords({ quantity: 20 });\nresult.forEach(function (item) {\n  item.quantity === 20 ?\n    assert.ok(true) :\n    assert.ok(false, \"Filter can not work correctly with (quantity)\")\n});",
              "err": {},
              "uuid": "e6d8b4ee-efaa-4e54-b3c5-5f5e4e7a0144",
              "parentUUID": "993de155-eba2-411c-a564-2c4aaaf29b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter with invalid (quantity) at column",
              "fullTitle": "Filter records by columns Filter with invalid (quantity) at column",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "result = table.filterRecords({ quantity: 380 });\nresult.forEach(function (item) {\n  item.quantity === 380 ?\n    assert.ok(false) :\n    assert.ok(true, \"Filter can not work correctly with (quantity)\")\n});",
              "err": {},
              "uuid": "82ca7ba1-f157-4476-a94c-90bf7de3fe44",
              "parentUUID": "993de155-eba2-411c-a564-2c4aaaf29b73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6c01b1c-8806-41a4-a724-b5f65a749c70",
            "94b0a3fd-0752-4fb3-a0af-7a8c3822b678",
            "aeda478e-820f-4f04-9807-85a6c7dc4c48",
            "7ca65af2-26f6-4fe6-bebb-b3f7410a0c15",
            "e6d8b4ee-efaa-4e54-b3c5-5f5e4e7a0144",
            "82ca7ba1-f157-4476-a94c-90bf7de3fe44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3dbf2aec-5b40-4f84-afc3-82139436070f",
          "title": "Get all records on table",
          "fullFile": "C:\\Users\\MFD\\Desktop\\Reengen\\RengenMocha\\test\\app.spec.js",
          "file": "\\test\\app.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all",
              "fullTitle": "Get all records on table Get all",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "result = table.getAllRecords();\nassert.equal(result[0], valid_data[0], \"Valid data can not be added.\")\nfor (let i = 0; i <= invalid_data.length; i++) {\n  result[i+1] !== invalid_data[i] ?\n  incorrect_saved_data.push(`Invalid data has been added.\\n ${result[i+1].brand}`) :\n  assert.ok(true)\n}\nconsole.error(incorrect_saved_data)\nassert.equal(result.length == valid_data.length, \"Invalid data has been added.\")",
              "err": {
                "message": "AssertionError: false == 'Invalid data has been added.'",
                "estack": "AssertionError [ERR_ASSERTION]: false == 'Invalid data has been added.'\n    at Context.<anonymous> (test\\app.spec.js:196:12)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "c7b4c115-7312-40d4-9fd0-8d007fd3118d",
              "parentUUID": "3dbf2aec-5b40-4f84-afc3-82139436070f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c7b4c115-7312-40d4-9fd0-8d007fd3118d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}